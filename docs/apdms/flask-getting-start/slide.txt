<style type="text/css">
  .reveal p {
    text-align: left;
  }
  .reveal ul {
    display: block;
  }
  .reveal ol {
    display: block;
  }
</style>

# Flask 初探

---

## 简介

* 微型 Web 框架；
* 基于 Werkzeug / Jinja2。

---

## Web Server 与 WSGI

--

### Web Server

![Web 服务器](/img/webserver.jpg)

--

### CGI - <b style="color:red;">C</b>ommon <b style="color:red;">G</b>ateway <b style="color:red;">I</b>nterface

* 通用网关接口；
* 定义了一系列变量和接口；
* 实现与其他程序对接，提供更加复杂的在线服务。

--

### FastCGI

* 一个守护进程处理多个请求；
* 现在的主流对接方式；
* 支持绝大多数服务器；
* 支持绝大多数语言。

--

### WSGI

* 专门为 Python 提供的接口；
* 可使用 FastCGI 与 Web 服务器通信；
* 多种实现: uWSGI / Gunicorn。

--

### Werkzeug

* Python 模块实现 WSGI 和 HTTP 处理工具；
* 是 flask 框架内置的服务器的底层支持。

---

## 全局图

![Python 全栈](/img/fullstackpythonmap.jpg)

---

## flask 的 Hello World

```python
#!/bin/python
# -*- coding=utf8 -*-

# 从 flask 中导入一个可以用于实例化 WSGI app的类
from flask import Flask
# 实例化这个 WSGI 类
# ref: http://flask.pocoo.org/docs/latest/api/#flask.Flask
app = Flask(__name__)


@app.route('/')
def index():
    return 'Hello, world.'

# __name__ 取值为 __main__ 说明当前py是程序的主入口
# 否则，说明当前py是以导入包的方式运行的
if __name__ == '__main__':
    app.run()
```

---

## 启动 Hello World 的 3 种方法

--

### 方法 0

```bash
python app.py
```

--

### 方法 1

```bash
export FLASK_APP=app.py
flask run
```

--

### 方法 2

```bash
export FLASK_APP=app.py
python -m flask run
```

---

## Refs

* http://flask.pocoo.org/docs/1.0/quickstart/

---

## Q & A