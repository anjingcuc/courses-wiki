<style type="text/css">
  .reveal p {
    text-align: left;
    font-size: 0.8em;
  }
  .reveal ul {
    display: block;
  }
  .reveal ol {
    display: block;
  }
</style>

# 第三方库<br/>与<br/>虚拟环境

---

## 第三方库

Python 社区拥有非常多活跃的开发者提供了海量的第三方库（Python 中称之为`包`），这些包托管在一个在线仓库 https://pypi.org/ 上，所有 Python 开发者都可以使用类似`软件包管理系统`的方式来获取这些包。

```bash
pip install requests  # 安装 HTTP 请求库 requests
pip install pillow    # 安装一个图像处理库 pillow
```

--

### 包管理系统

![包管理器](/courses-wiki/img/processofpip.jpg)<!-- .element style="width:70%;" -->

<!-- .element style="text-align:center"-->

--

### 修改安装源

方法一 临时修改:

```bash
pip install -i https://mirrors.aliyun.com/pypi/simple requests
```

方法二 全局固定修改:

Windows: 在 %APPDATA% 中新建 `pip` 文件夹并在其中新建配置文件`pip.ini`。
linux/macOS: 在用户目录下创建 `.pip` 文件夹，并在该文件中创建 `pip.conf`，完整路径为 `~/.pip/pip.conf`。

<!-- .element: style="font-size:60%;" -->

```ini
[global]
index-url = https://mirrors.aliyun.com/pypi/simple
[install]
trusted-host = mirrors.aliyun.com
```

---

### 离线安装与 whl 文件

whl 文件的格式为 The Wheel Binary Package Format 文件，是一种 Python 第三方库的“安装程序”。在无法联网时，可以通过直接下载该文件进行第三方库的安装。

- 一种压缩包，包含了 Python 第三方库安装所需文件和信息
- 有三种类型:
  - Universal Wheel，纯 Python 包，同时支持 Python2/Python3。
  - Pure Python wheel，纯 Python 包，不同时支持 Python2/Python3。
  - Platform Wheel，非纯 Python 包，包含编译后的平台相关文件。

<!-- .element: style="font-size:70%;" -->

_source: [PEP 427](https://www.python.org/dev/peps/pep-0427/) / [PEP 491](https://www.python.org/dev/peps/pep-0491/) / [FileInfo](https://fileinfo.com/extension/whl)_

<!-- .element: style="font-size:50%;" -->

--

### whl 命名规则

{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl

| 字段         | 含义                                 |
| ------------ | ------------------------------------ |
| distribution | 包名称, e.g. 'django', 'requests'.   |
| version      | 包版本, e.g. 1.0.                    |
| build tag    | 可选构建标签. 数字开头               |
| python tag   | 语言版本, e.g. 'py27', 'py2', 'py3'. |
| abi tag      | e.g. 'cp33m', 'abi3', 'none'.        |
| platform tag | e.g. 'win32', 'any'.                 |

<!-- .element: style="font-size:70%;" -->

--

### 安装 whl 文件

whl 文件安装同样使用 `pip install`，比如下载 opencv_python 库以后：

```bash
pip install opencv_python-4.1.2+contrib-cp38-cp38-win_amd64.whl
```

_注: Windows 平台下 Python 包可以到 https://www.lfd.uci.edu/~gohlke/pythonlibs/ 下载_

<!-- .element: style="font-size:50%;" -->

--

### 包安装路径

- `%PYTHON_PATH%\lib\site-packages`, 即 Python 安装路径下的 `lib\site-packages` 子目录。
- 在 `import` 时会从 Python 的 `sys.path` 中查找
- 以下代码可以查看路径：

<!-- .element: style="font-size:70%;" -->

```python
import sys
print(sys.path)
```

---

## 虚拟环境管理

在同一台机器上存在多版本 Python 或者有大量不同的 Python 项目时，同时使用多个隔离的 Python 环境（即虚拟环境）。

- 同一系统中存在不同 Python 版本。
- 同一 Python 版本不同项目使用不同的第三方包。
- 脚本发布/迁移时快速安装依赖的第三方包。

<!-- .element: style="font-size:70%;" -->

--

### 手动切换

如果不使用工具，可以操作环境变量来实现多个环境的切换。

- 存在多版本 Python 时，根据环境变量先后来决定使用哪个
- 可以在系统中调整环境变量的先后来手动切换版本
- 以下命令查看当前 Python 路径:

<!-- .element: style="font-size:70%;" -->

```bash
where python
```

--

### 自动化管理工具

自动化管理工具的思路就是通过自动修改环境变量来实现多种环境的切换。

- 多种开源工具，通过脚本设置环境变量来为不同项目切换不同版本
- virtualenv / venv / pyenv / pipenv 等
- 多 Python 版本 / 同一 Python 版本虚拟/隔离运行环境

<!-- .element: style="font-size:70%;" -->

--

### Pipnev

Pipenv 是我个人常用的一个工具，同学们也可以选择其他工具。

- 使用 pipenv 来管理不同项目的依赖包
- Python Dev Workflow for Humans
  - 作者: Kenneth Reitz - requests

<!-- .element: style="font-size:70%;" -->

--

### Pipnev 安装

确认已经安装好 Python 和 pip 包管理器，并配置好环境变量，然后在命令行中执行:

```bash
pip install pipenv
```

--

### 工作流

安装完成后即可使用 pipenv 以文件夹为单位来管理各个不同项目环境。

```bash
cd ~/workspace/demo     # 进入工作目录
pipenv install           # 初始化工作环境，创建 Pipfile
pipenv install numpy     # 安装所需要的包，如 numpy
pipenv run python xxx.py # 在工作环境中运行代码
pipenv shell             # 或者直接激活工作环境
python xxx.py            # 运行代码
```

--

### Pipfile

```TOML
[[source]]
url = "https://mirrors.aliyun.com/pypi/simple"
verify_ssl = true
name = "aliyun_pypi"

[packages]
numpy = "*"
dlib = "*"

[dev-packages]

[requires]
python_version = "3.8"
```

--

### Pipfile.lock

```json
{
  "_meta": {
    "hash": {
      "sha256": "f13c6b2ec40cc6e413412a0ab56b849b2a4d42c8ed803c298efe430e4f86ed14"
    },
    "pipfile-spec": 6,
    "requires": {
      "python_version": "3.6"
    },
    "sources": [
      {
        "name": "aliyun_pypi",
        "url": "https://mirrors.aliyun.com/pypi/simple",
        "verify_ssl": true
      }
    ]
  },
  "default": {
    "dlib": {
      "hashes": [
        "sha256:ad5e9e6276d1486b8ef7383229379d759f155f7d2c703e67e3d84682fb2a93c5"
      ],
      "index": "aliyun_pypi",
      "version": "==19.15.0"
    },
    "numpy": {
      "hashes": [
        "sha256:1c362ad12dd09a43b348bb28dd2295dd9cdf77f41f0f45965e04ba97f525b864",
        "sha256:2156a06bd407918df4ac0122df6497a9c137432118f585e5b17d543e593d1587",
        "sha256:24e4149c38489b51fc774b1e1faa9103e82f73344d7a00ba66f6845ab4769f3f",
        "sha256:340ec1697d9bb3a9c464028af7a54245298502e91178bddb4c37626d36e197b7",
        "sha256:35db8d419345caa4eeaa65cd63f34a15208acd87530a30f0bc25fc84f55c8c80",
        "sha256:361370e9b7f5e44c41eee29f2bb5cb3b755abb4b038bce6d6cbe08db7ff9cb74",
        "sha256:36e8dcd1813ca92ce7e4299120cee6c03adad33d89b54862c1b1a100443ac399",
        "sha256:378378973546ecc1dfaf9e24c160d683dd04df871ecd2dcc86ce658ca20f92c0",
        "sha256:419e6faee16097124ee627ed31572c7e80a1070efa25260b78097cca240e219a",
        "sha256:4287104c24e6a09b9b418761a1e7b1bbde65105f110690ca46a23600a3c606b8",
        "sha256:549f3e9778b148a47f4fb4682955ed88057eb627c9fe5467f33507c536deda9d",
        "sha256:5e359e9c531075220785603e5966eef20ccae9b3b6b8a06fdfb66c084361ce92",
        "sha256:5ee7f3dbbdba0da75dec7e94bd7a2b10fe57a83e1b38e678200a6ad8e7b14fdc",
        "sha256:62d55e96ec7b117d3d5e618c15efcf769e70a6effaee5842857b64fb4883887a",
        "sha256:719b6789acb2bc86ea9b33a701d7c43dc2fc56d95107fd3c5b0a8230164d4dfb",
        "sha256:7a70f2b60d48828cba94a54a8776b61a9c2657a803d47f5785f8062e3a9c7c55",
        "sha256:7b9e37f194f8bcdca8e9e6af92e2cbad79e360542effc2dd6b98d63955d8d8a3",
        "sha256:83b8fc18261b70f45bece2d392537c93dc81eb6c539a16c9ac994c47fc79f09a",
        "sha256:9473ad28375710ab18378e72b59422399b27e957e9339c413bf00793b4b12df0",
        "sha256:95b085b253080e5d09f7826f5e27dce067bae813a132023a77b739614a29de6e",
        "sha256:98b86c62c08c2e5dc98a9c856d4a95329d11b1c6058cb9b5191d5ea6891acd09",
        "sha256:a3bd01d6d3ed3d7c06d7f9979ba5d68281f15383fafd53b81aa44b9191047cf8",
        "sha256:c81a6afc1d2531a9ada50b58f8c36197f8418ef3d0611d4c1d7af93fdcda764f",
        "sha256:ce75ed495a746e3e78cfa22a77096b3bff2eda995616cb7a542047f233091268",
        "sha256:dae8618c0bcbfcf6cf91350f8abcdd84158323711566a8c5892b5c7f832af76f",
        "sha256:df0b02c6705c5d1c25cc35c7b5d6b6f9b3b30833f9d178843397ae55ecc2eebb",
        "sha256:e3660744cda0d94b90141cdd0db9308b958a372cfeee8d7188fdf5ad9108ea82",
        "sha256:f2362d0ca3e16c37782c1054d7972b8ad2729169567e3f0f4e5dd3cdf85f188e"
      ],
      "index": "aliyun_pypi",
      "version": "==1.15.1"
    }
  },
  "develop": {}
}
```

--

### 默认环境路径

pipenv 将所有虚拟环境都放在用户目录下：

- `%HOMEPATH%\.virtualenvs`, 即用户目录下的`.virtualenvs`文件夹下
- 每个环境对应该目录下的子目录

<!-- .element: style="font-size:70%;" -->

---

## Python 与 Anaconda

Anaconda 与 Python 关系密切。

- 一个 Python 的开源发行版
- 包含 conda 跨平台包管理器
- 包含科学计算所需的常见第三方库
- 附带编辑器、交互式 Shell、文档

<!-- .element: style="font-size:70%;" -->

--

### 关系图

![关系](/courses-wiki/img/relationship.png) <!-- .element style="width:50%;" -->

<!-- .element style="text-align:center"-->

--

### 关系说明

- Anaconda 默认安装包括了 conda 和 Python
- 同时 conda 可以通过 Miniconda 单独安装
- 可以使用 conda 来安装 Python 甚至多版本
- Python 默认安装包括了 pip (除个别系统)
- pip 仅用于安装各种 Python 第三方库
- conda 不仅能够安装 Python 第三方库还能管理别的语言和工具

<!-- .element: style="font-size:70%;" -->

---

## Q & A
