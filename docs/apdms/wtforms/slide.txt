<style type="text/css">
  .reveal p {
    text-align: left;
  }
  .reveal ul {
    display: block;
  }
  .reveal ol {
    display: block;
  }
</style>

# WTF 表单

---

## 表单

- 用于收集用户输入；
- 常见登录 / 注册框；
- 多种元素实现多种输入。

--

### 基本结构

```html
<form action="/upload" method="post">
  <!-- ... -->
  <!-- form element-->
  <!-- ... -->
</form>
```

---

## 表单元素

--

### input

<p style="text-align:left; font-size: 32px">定义一个输入元素。

```html
<input type="text" />
```

--

### input type

- password
- file
- checkbox
- radio
- email

--

### button

<p style="text-align:left; font-size: 32px">一般应用场景下，`<form>` 元素中会包含一个 `<button>` 元素且 `type=submit`。点击该按钮则触发定义好的 `action`。

```html
<form action="/login" method="post">
  <input type="text" name="username" />
  <input type="password" name="password" />

  <button type="submit">登录</button>
</form>
```

--

### select / option

<p style="text-align:left; font-size: 32px">下拉菜单。

```html
<select>
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>
```

--

### textarea

<p style="text-align:left; font-size: 32px">多行文本框。

```html
<textarea rows="3"></textarea>
```

--

### Try it!

---

## CSRF

CSRF, <b style="color:red;">C</b>ross-<b style="color:red;">S</b>ite <b style="color:red;">R</b>equest <b style="color:red;">F</b>orgery。跨站请求伪造。

![CSRF](/img/csrf.jpg)

--

### 防御

<p style="text-align:left; font-size: 32px">STP, Synchronizer token pattern，服务端为每一次表单提交生成一个独一无二的 token 嵌入到表单中，实现防御。

```html
<input
  type="hidden"
  name="csrfmiddlewaretoken"
  value="KbyUmhTLMpYj7CD2di7JKP1P3qmLlkPt"
/>
```

---

## WTForms

- 简化表单创建过程
- 便于实现表单验证
- 加固表单提交安全
- 实现同一表单复用

---

## Flask-WTF 表单创建过程

1. 创建 FlaskForm 子类
2. 定义表单字段
3. StringField
4. PasswordField
5. 在模板中引用

--

### 登录表单示例

```python
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField
from wtforms.validators import DataRequired, Email

class LoginForm(FlaskForm):
    email = StringField('email', validators=[DataRequired(), Email()])
    password = PasswordField('password', validators=[DataRequired()])
```

--

### 模板中使用

```html
<form action="/signin" method="post">
  <legend>Sign In:</legend>
  <p>{{ form.email(placeholder='yourname@email.com') }}</p>
  <p>{{ form.password }}</p>

  <p><input type="submit" value="Sign In" /></p>
</form>
```

---

## 表单验证

- 使用内置验证器
  - DataRequired
  - Email
  - EqualTo

--

### 自定义验证规则

```python
def validate_password(self, field):
  password = field.data
  if password == password.lower() or password == password.upper():
    raise ValidationError('密码必须同时包含大小写')
```

---

## 结合 Jinja2 的宏

```html
{% macro render_field(field) %}
<dt>{{ field.label }}</dt>
<dd>
  {{ field(**kwargs) | safe }} {% if field.errors %}
  <ul class="error">
    {% for error in field.errors %}
    <li>{{ error }}</li>
    {% endfor %}
  </ul>
  {% endif %}
</dd>
{% endmacro %}
```

```html
{% from "_formhelpers.html" import render_field %}
<form action="/register" method="post">
  <dl>
    {{ render_field(form.username) }}
    {{ render_field(form.password) }}
    {{ render_field(form.confirm) }}
  <dl>
</form>
```

---

## Q & A
