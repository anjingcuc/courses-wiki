<style type="text/css">
  .reveal p {
    text-align: left;
    font-size: 0.8em;
  }
  .reveal ul {
    display: block;
  }
  .reveal ol {
    display: block;
  }
</style>

# 数据类型基础

---

## 数字类型

基本所有高级语言都有数字类型。Python 中存在三种不同数字类型: 整数、小数以及复数。

- 整数: int
- 浮点数: float
- 复数: complex

--

### 整型

Python 中的整数具有无限精度，也就是多大的整数都属于这个类型。默认情况下整数为十进制，要表示其他进制需要加上前缀。

| 进制     | 前缀 | 示例        |
| -------- | ---- | ----------- |
| 二进制   | `0b` | `0b1100001` |
| 八进制   | `0o` | `0o141`     |
| 十进制   | 无   | `97`        |
| 十六进制 | `0x` | `0x61`      |

--

### 浮点数和复数

数字中包含小数点则会自动识别为浮点数，包含 `j` 则会识别为复数的虚部，复数只在科学计算中出现，此处不做详细介绍。

```python
f = 3.1415926535897932384626

# 学习过程中很常用的一个内置函数，查看变量的类型
type(f)

c = 1 + 2j

type(c)
```

--

### 数字运算符

除了复数，数字类型都支持下列运算符：

| 运算   | 结果          |
| ------ | ------------- |
| x + y  | x 和 y 的和   |
| x - y  | x 和 y 的差   |
| x \* y | x 和 y 的乘积 |
| x / y  | x 和 y 的商   |
| x // y | x / y 的商数  |
| x % y  | x / y 的余数  |

<!-- .element: style="font-size:70%;" -->

_注：还有额外的运算符以及运算函数，详见[官方文档-标准库-内置类型](https://docs.python.org/zh-cn/3/library/stdtypes.html#numeric-types-int-float-complex)_

<!-- .element: style="font-size:60%;" -->

---

## 字符串

字符串是 Python 中的一种不可变序列，使用一个字符串的格式化操作来讲要输出的变量按照需要的格式进行输出，并加上了相关文字。

- 字符串可以用单引号`'`或者双引号`"`括起来。
- 与 C 语言类似，转义字符为反斜杠 `\`。
- 如果一个字符串中想要禁用转义符号，则前面加`r`,如 `r'C:\Windows'`。
- 多行字符串可以使用三个但单引号或三个双引号来包裹。

<!-- .element: style="font-size:70%;" -->

--

### 字符串的索引

索引，即取出某个位置上的字符:

```
 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
   0   1   2   3   4   5
  -6  -5  -4  -3  -2  -1
```

```python
demo = 'Hello, world!'
print(demo[0]) # 'H'
print(demo[-1]) # '!'
```

--

### 字符串切片

切片，或称为子串:

```
 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
```

```python
demo = 'Hello, world!'
print(demo[0:5]) # 'Hello'
print(demo[:5]) # 'Hello'
print(demo[5:13]) # ', world!'
print(demo[5:]) # ', world!'
```

--

### 字符串拼接

字符串拼接非常简单，用 `+` 操作符可以直接完成。

```python
first_name = 'An'
last_name = 'Jing'

name = first_name + last_name
```

--

### printf 风格的字符串格式化

使用 `%` 来实现输出。

```python
number = 2
mood = '快乐'
print('这是我们第 %d 节课，我很%s。' % (number, mood))
```

_注：[详细格式化规则](https://docs.python.org/zh-cn/3/library/string.html#format-specification-mini-language)_

<!-- .element: style="font-size:60%;" -->

---

### 类型转换

直接使用类型的名称对应的内置函数来进行转换，在整型与浮点进行运算时，将会全部转换成浮点型来完成计算：

| 函数                | 作用                                                   |
| ------------------- | ------------------------------------------------------ |
| int(x, base=10)     | 将数字或者 base 对应进制的字符串 x，转换成十进制的整数 |
| float(x)            | 将数字或者字符串 x，转换成浮点数                       |
| hex(x)              | 将整数 x 转换为以'0x'为前缀的小写十六进制字符串        |
| oct(x)              | 将整数 x 转换为以'0o'为前缀的八进制字符串              |
| bin(x)              | 将整数 x 转换为以'0b'为前缀的二进制字符串              |
| str(x)              | 将 x 转换为字符串                                      |
| ord(x)              | 将单个字符 x 转换为整数                                |
| chr(x)              | 将整数 x 转换为对应的单个字符                          |
| complex(real, imag) | 返回 real + imag\*1j 的复数                            |

<!-- .element: style="font-size:60%;" -->

---

## 列表

列表属于 Python 中的可变序列中的一种，类似其他高级语言中的数组，但它的长度和内容是可以使用中改变的。列表可以通过多种方式来构建。

- 使用一对方括号来构建一个空的列表 `[]` 。
- 使用方括号，里面的项用逗号分割，`[1, 2, 3]`。
- 使用列表推导式构建: `[x for x in range(4)]`。
- 使用类型构造器: `list()` / `list(range(4))`。

<!-- .element: style="font-size:70%;" -->

--

### 列表的索引

与字符串类似，列表也可以通过索引来访问其中的单个元素。但与字符串不同的是，索引后可以通过赋值操作来改变特定项的内容。

```
['a', 'b', 'c', 'd', 'e', 'f', 'g']
  0    1    2    3    4    5    6
 -7   -6   -5   -4   -3   -2   -1
```

```python
a = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
a[1] = '666'  # ['a', '666', 'c', 'd', 'e', 'f', 'g']
print(a[1]) # 666
```

--

### 列表的切片

切片，或称为子串:

```
 +-----+-----+-----+-----+-----+-----+-----+
 | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' |
 +-----+-----+-----+-----+-----+-----+-----+
 0     1     2     3     4     5     6     7
-7    -6    -5    -4    -3    -2    -1
```

```python
a = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print(a[0:5]) # ['a', 'b', 'c', 'd']
print(demo[:5]) # ['a', 'b', 'c', 'd']
print(demo[5:]) # ['e', 'f', 'g']
```

--

### 列表的拼接

与字符串类似，也可以用 `+` 运算符来实现，或者用 `.append()` 在尾部加入新的项。

```python
shop_cart = ['口罩', '洗手液']
shop_cart = shop_cart + ['Switch', '口红'] # ['口罩', '洗手液', 'Switch', '口红']
shop_cart.append('摄像头') # ['口罩', '洗手液', 'Switch', '口红', '摄像头']
```

---

## Q & A
