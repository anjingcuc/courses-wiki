<style type="text/css">
  .reveal p {
    text-align: left;
    font-size: 0.8em;
  }
  .reveal ul {
    display: block;
  }
  .reveal ol {
    display: block;
  }
</style>

# 文件与目录

---

## 二进制数据

所有类型文件实际上在存储时都是以二进制形式存储在硬盘上的，文本文件实际上在写入到硬盘上的时候都经过了编码，在硬盘上保存的依然是二进制数据。Python 中对于二进制数据处理有两种内置类型对象 bytes 和 bytearray ，bytes 是不可变序列， bytearray 是可变序列，类似于元组与列表的关系。

--

### bytes

bytes 更加常见，其表现形式用 `b'0'` 来表示，类似于字符串前加一个 `b` 。

- 可以用字面值直接赋值，单引号、双引号以及三重引号都可以。
- 指定长度的以零值填充的 bytes 对象: bytes(10)。
- 通过由整数组成的可迭代对象: bytes(range(20))。

<!-- .element: style="font-size:70%;" -->

```python
a = b'\x00\x00\x00' # 字面值直接复制，存储下来为 00 00 00 三个字节的 0
b = bytes([0,0,0])  # 存储下来为 00 00 00 三个字节的 0
c = bytes(3)        # 存储下来为 00 00 00 三个字节的 0
d = b'000'          # 存储下来为 30 30 30 每个字节对应字符 '0' 的 ASCII 码 0x30
e = bytes(range(3)) # 存储下来为 00 01 02
```

--

### bytearray

bytearray 没有类似 bytes 的字面值，只能通过调用 `bytearray()` 来创建：

- 创建一个空实例: bytearray()。
- 创建一个指定长度的以零值填充的实例: bytearray(10)。
- 通过由整数组成的可迭代对象: bytearray(range(20))。
- 通过缓冲区协议复制现有的二进制数据: bytearray(b'Hi!')。

<!-- .element: style="font-size:70%;" -->

--

### 二进制操作

bytes 与 bytearray 都是序列，所以他们都能支持在数据类型进阶一节提到的切片、索引、查找之类的通用的序列操作方法，另外它们有两个常用的操作方法 `hex()` 和 `fromhex()`。

```python
a = bytes(range(10)) # b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09'
b = a[:5]            # b'\x00\x01\x02\x03\x04'

hex_string = b.hex() # '0001020304'
c = bytes.fromhex('2030FF') # b' 0\xff'

index = a.index(b'\x00') # 0
```

---

## 二进制文件

上节课提到，除了文本模式打开文件，还可以采用二进制模式打开并读写文件，这里以 BMP 图片为例来讲解二进制文件的读取和解析过程。

--

### BMP 格式

<p style='text-align:left;'>常见组成部分如下表。</p>

| 结构名称 | 内容                   |
| -------- | ---------------------- |
| 文件头   | 通用文件信息           |
| 信息头   | 图像格式信息及像素格式 |
| 图像数据 | 像素值                 |

--

### 文件头

| 偏移量 | 大小 | 用途                                                               |
| ------ | ---- | ------------------------------------------------------------------ |
| 0000h  | 2    | 用于标识 BMP 和 DIB 文件的魔数，一般为 0x42 0x4D，即 ASCII 的 BM。 |
| 0002h  | 4    | BMP 文件的大小（单位为字节）                                       |
| 0006h  | 2    | 保留；实际值因创建程序而异                                         |
| 0008h  | 2    | 保留；实际值因创建程序而异                                         |
| 000Ah  | 4    | 位图数据（像素数组）的地址偏移，也就是起始地址。                   |

<!-- .element: style="font-size:70%;" -->

--

### 信息头

| 偏移量 | 大小 | 用途                                                           |
| ------ | ---- | -------------------------------------------------------------- |
| 0Eh    | 4    | 该头结构的大小（40 字节）                                      |
| 12h    | 4    | 位图宽度，单位为像素（有符号整数）                             |
| 16h    | 4    | 位图高度，单位为像素（有符号整数）                             |
| 1Ah    | 2    | 色彩平面数；只有 1 为有效值                                    |
| 1Ch    | 2    | 每个像素所占位数，即图像的色深。典型值为 1、4、8、16、24 和 32 |
| 1Eh    | 4    | 所使用的压缩方法。                                             |
| 22h    | 4    | 图像大小。指原始位图数据的大小，与文件大小不是同一个概念。     |
| 26h    | 4    | 图像的横向分辨率，单位为像素每米（有符号整数）                 |
| 2Ah    | 4    | 图像的纵向分辨率，单位为像素每米（有符号整数）                 |
| 2Eh    | 4    | 调色板的颜色数                                                 |
| 32h    | 4    | 重要颜色数                                                     |

<!-- .element: style="font-size:50%;" -->

--

### 标准库 struct

struct 模块可以帮助开发者将二进制 bytes 对象按照类似 C 语言中的结构体的形式转换成对应的 Python 值（比如 str / int）。

| 方法                               | 功能                                                             |
| ---------------------------------- | ---------------------------------------------------------------- |
| `struct.pack(format, v1, v2, ...)` | 返回一个 bytes 对象，将 `v1, v2, ...` 按照 `format` 结构打包     |
| `struct.unpack(format, buffer)`    | 返回一个元组，将 `buffer` 中的内容根据 `format` 解包成 Python 值 |

<!-- .element: style="font-size:70%;" -->

_注：`format` 编写需要参考 https://docs.python.org/zh-cn/3/library/struct.html#format-strings_

<!-- .element: style="font-size:50%;" -->

--

### 示例 1

---

## 字符集/字符编码

前面已经提到，文本文件在写入到硬盘的时候也会**编码**成二进制数据，那么怎么将人类可读的文本字符转化为二进制数据，就是这里要讨论的字符集/编码规则的问题。Universal Multiple-Octet Coded Character Set, 简称 `UCS`, 俗称 `Unicode`。UCS Transfer Format, 简称 `UTF`, 最常见的为 `UTF-8`。

- Unicode 是字符集，规定了 `字符` 到数字的映射。
- UTF-8 是字符编码，规定了 `字符` 到数字映射完成后，还要考虑尽可能缩短同样内容的编码结果。
- 字符集可能对应多个版本的字符编码，也有可能字符集和字符编码一一对应。

<!-- .element: style="font-size:70%;" -->

_故事: https://www.zhihu.com/question/23374078_

<!-- .element: style="font-size:50%;" -->

---

## 目录操作

--

### 标准库 os

`os` 是 Python 中的一个标准库，专门负责进行操作系统相关的操作，其中包括绝大部分系统中的目录操作，如遍历目录，创建目录，删除目录/文件，处理文件名，拼接文件名等。

--

### 常见目录操作

| 方法                                                          | 功能                                                          |
| ------------------------------------------------------------- | ------------------------------------------------------------- |
| `os.listdir(path='.')`                                        | 返回一个包含子目录/文件的 list(不包含子目录中的内容)          |
| `os.walk(top, topdown=True, onerror=None, followlinks=False)` | 是一个生成器，每次返回一个 3 元组，包括当前路径，子目录和文件 |
| `os.mkdir(path, mode=0o777, *, dir_fd=None)`                  | 新建文件夹                                                    |
| `os.stat(path, *, dir_fd=None, follow_symlinks=True)`         | 获取文件信息                                                  |
| `os.remove(path, *, dir_fd=None)`                             | 删除文件                                                      |
| `os.rmdir(path, *, dir_fd=None)`                              | 删除目录                                                      |
| `os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)`    | 重命名目录或者文件，相当于剪切并黏贴                          |

<!-- .element: style="font-size:60%;" -->

--

### 路径字符串相关处理

| 方法                        | 功能                                     |
| --------------------------- | ---------------------------------------- |
| `os.path.join(path,*paths)` | 自动拼接路径，兼容多种操作系统           |
| `os.path.isdir(path)`       | 路径是否为目录                           |
| `os.path.isfile(path)`      | 路径是否为文件                           |
| `os.path.exsists(path)`     | 目录/文件是否存在                        |
| `os.path.dirname(path)`     | 获取一个路径中目录的部分                 |
| `os.path.basename(path)`    | 获取一个路径中文件名的部分               |
| `os.path.split(path)`       | 将一个路径分割成以上两个部分             |
| `os.path.splitext(path)`    | 将一个路径分割成扩展名和非扩展名两个部分 |

<!-- .element: style="font-size:60%;" -->

--

### 示例 2

--

### 标准库 pathlib

os 的 path 子模块是基于字符串来对路径实现操作的，并没有抽象出一个 Path 对象，Python 3.4+ 以后，为了更加统一的对路径进行处理，提供了 pathlib 这一标准库。

--

### 常见目录操作

| 操作                                                    | 功能                                                                                |
| ------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `Path.glob('**/*')`                                     | 返回包含子目录/文件的生成器<sup style='color:red'>\*</sup> (**包含**子目录中的内容) |
| `Path.iterdir()`                                        | 返回包含子目录/文件的生成器<sup style='color:red'>\*</sup> (**包含**子目录中的内容) |
| `Path.mkdir(mode=0o777, parents=False, exist_ok=False)` | 新建文件夹                                                                          |
| `Path.stat()`                                           | 获取文件信息                                                                        |
| `Path.unlink(missing_ok=False)`                         | 删除文件                                                                            |
| `Path.rmdir()`                                          | 删除目录                                                                            |
| `Path.rename(target)`                                   | 重命名目录或者文件，相当于剪切并黏贴                                                |

<!-- .element: style="font-size:60%;" -->

_<sup style='color:red'>\*</sup>: 生成器 generator , 可用 `for x in <generator>:` 的语法进行遍历，或用列表推导式 `[x for x in <generator>]` 展开成列表；后续课程会介绍。_

<!-- .element: style="font-size:50%;" -->

--

### 路径相关处理

| 操作              | 功能                                               |
| ----------------- | -------------------------------------------------- |
| `/`               | 运算符，自动拼接路径，兼容多种操作系统             |
| `Path.is_dir()`   | 路径是否为目录                                     |
| `Path.is_file()`  | 路径是否为文件                                     |
| `Path.exsists()`  | 目录/文件是否存在                                  |
| `PurePath.parent` | 获取一个路径中目录的部分                           |
| `PurePath.name`   | 获取一个路径中文件名的部分                         |
| `PurePath.stem`   | 获取不包含后缀的文件名，`os.path` 模块没有此类方法 |
| `PurePath.suffix` | 将一个路径分割成扩展名和非扩展名两个部分           |

<!-- .element: style="font-size:60%;" -->

--

### 示例 3

---

## Q & A
